const HANGUL_COMPATIBILITY_OR_SYLLABLE_REGEX = /[\u3130-\u318F\uAC00-\uD7AF]/;

/**
 * Returns true if the input includes any Hangul Compatibility Jamo or
 * Hangul Conjoined Syllable.
 *
 * @param {string} str
 */
function hasCompatibilityOrSyllable(str) {
  return HANGUL_COMPATIBILITY_OR_SYLLABLE_REGEX.test(str);
}

/* Compatibility Jamo -> Conjoining Jamo
 *
 * Maps a compatibility character to the Conjoining Jamo character,
 * positioned at (compatibilityCodePoint - 0x3131).
 *
 * Generated by:
 * $ grep '^31[3-8].;' UnicodeData.txt |\
 *     awk -F';' '{print $6}' | awk '{print "  0x"$2","}'
 */
const CMAP = [
  0x1100,
  0x1101,
  0x11aa,
  0x1102,
  0x11ac,
  0x11ad,
  0x1103,
  0x1104,
  0x1105,
  0x11b0,
  0x11b1,
  0x11b2,
  0x11b3,
  0x11b4,
  0x11b5,
  0x111a,
  0x1106,
  0x1107,
  0x1108,
  0x1121,
  0x1109,
  0x110a,
  0x110b,
  0x110c,
  0x110d,
  0x110e,
  0x110f,
  0x1110,
  0x1111,
  0x1112,
  0x1161,
  0x1162,
  0x1163,
  0x1164,
  0x1165,
  0x1166,
  0x1167,
  0x1168,
  0x1169,
  0x116a,
  0x116b,
  0x116c,
  0x116d,
  0x116e,
  0x116f,
  0x1170,
  0x1171,
  0x1172,
  0x1173,
  0x1174,
  0x1175,
  0x1160,
  0x1114,
  0x1115,
  0x11c7,
  0x11c8,
  0x11cc,
  0x11ce,
  0x11d3,
  0x11d7,
  0x11d9,
  0x111c,
  0x11dd,
  0x11df,
  0x111d,
  0x111e,
  0x1120,
  0x1122,
  0x1123,
  0x1127,
  0x1129,
  0x112b,
  0x112c,
  0x112d,
  0x112e,
  0x112f,
  0x1132,
  0x1136,
  0x1140,
  0x1147,
  0x114c,
  0x11f1,
  0x11f2,
  0x1157,
  0x1158,
  0x1159,
  0x1184,
  0x1185,
  0x1188,
  0x1191,
  0x1192,
  0x1194,
  0x119e,
  0x11a1
];
const CBASE = 0x3131;
const CCOUNT = CMAP.length;
const CTOP = CBASE + CCOUNT;

/**
 * Maps one Hangul Compatibility Jamo code-point to the equivalent Hangul
 * Conjoining Jamo characters, as defined in UnicodeData.txt.
 *
 * @param {number} codePoint  One Unicode code-point
 * @output {string}
 */
function fromCompatibility(codePoint) {
  return String.fromCharCode(CMAP[codePoint - CBASE]);
}

/**
 * Conjoined Syllable -> Conjoining Jamo
 *
 * Based on the "Hangul Syllable Decomposition" algorithm provided in
 * 3.12 Conjoining Jamo Behavior, The Unicode Standard, Version 6.3.0.
 * <http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf>
 */
const LBASE = 0x1100;
const VBASE = 0x1161;
const TBASE = 0x11a7;
const SBASE = 0xac00;
const LCOUNT = 19;
const VCOUNT = 21;
const TCOUNT = 28;
const NCOUNT = VCOUNT * TCOUNT;
const SCOUNT = LCOUNT * NCOUNT;
const STOP = SBASE + SCOUNT;

/**
 * Maps one Hangul Syllable code-point to the equivalent Hangul
 * Conjoining Jamo characters, as defined in UnicodeData.txt.
 *
 * @param odePoint One Unicode character
 * @output {string}
 */
function decomposeSyllable(codePoint: number) {
  const sylSIndex = codePoint - SBASE;
  const sylTIndex = sylSIndex % TCOUNT;
  return (
    String.fromCharCode(LBASE + sylSIndex / NCOUNT) +
    String.fromCharCode(VBASE + (sylSIndex % NCOUNT) / TCOUNT) +
    (sylTIndex > 0 ? String.fromCharCode(TBASE + sylTIndex) : '')
  );
}

/* To Conjoining Jamo */

/**
 * Return Unicode characters as they are, except for Hangul characters, which
 * will be converted to the Conjoining Jamo form.
 */
function toConjoiningJamo(string: string): string {
  if (!hasCompatibilityOrSyllable(string)) {
    return string;
  }

  const result = [];

  for (let i = 0; i < string.length; i++) {
    const charStr = string.charAt(i);
    const codeUnit = charStr.charCodeAt(0);
    result.push(
      CBASE <= codeUnit && codeUnit < CTOP
        ? fromCompatibility(codeUnit)
        : SBASE <= codeUnit && codeUnit < STOP
        ? decomposeSyllable(codeUnit)
        : charStr
    );
  }

  return result.join('');
}

const UnicodeHangulKorean = {
  toConjoiningJamo: toConjoiningJamo
};
export default UnicodeHangulKorean;
